* Switching from Arch Linux to NixOS                                 :linux:nix:
:PROPERTIES:
:NAVI_ID: post-nixos-switch
:EXPORT_FILE_NAME: post-nixos-switch.html
:EXPORT_DATE: 2024-09-06
:END:

** Subheader

Testing!

* Writing a static site generator in Common Lisp                      :lisp:dev:
:PROPERTIES:
:NAVI_ID: post-navi
:EXPORT_FILE_NAME: post-navi.html
:EXPORT_DATE: 2024-09-05
:END:

* Sending Common Lisp objects to the REPL                           :emacs:lisp:
:PROPERTIES:
:NAVI_ID: post-cl-emacs-integration
:EXPORT_FILE_NAME: post-cl-emacs-integration.html
:EXPORT_DATE: 2024-09-06
:END:

Emacs is a wonderful editor for editing Common Lisp code. However, each project
is unique (lisp projects especially so) and sometimes you need some
domain-specific tooling. One thing that's particularly useful is sending object
to the REPL.

(We're using [[https://github.com/joaotavora/sly][SLY]] in this post, but similar things should be possible in [[https://slime.common-lisp.dev/][Slime]] as
well).

** Sending lisp objects to the REPL

You can send lisp objects (including CLOS references) to the REPL by using
=slynk-mrepl:copy-to-repl-in-emacs=. This can be super useful in some GUI
applications that allows the user to select objects from inside the application
itself. For instance, a game engine may allow you to select objects by using
raycasting when they are clicked on with a mouse, or when a key is pressed.

To send an object from the CL image to Emacs, first allow the inferior Lisp to
evaluate arbitrary forms in Emacs:

#+begin_src elisp
(setq sly-enable-evaluate-in-emacs t)
#+end_src

Then, to send an object from the CL image to the REPL, run the following:

#+begin_src lisp
(let ((object 123))
  (slynk-mrepl:copy-to-repl-in-emacs (list object) :blurb ""))
#+end_src

The selected object can then be inspected and used from the REPL as normal.

Since you can also send arbitrary S-expressions from Emacs to the image, we can
write a little helper function to allow us to output any CL object from Emacs
itself. For instance, you could set up keybindings that sends any object to the
REPL so you can inspect it further:

#+begin_src elisp
(defun sly-eval-copy-to-repl (sexp)
  (sly-eval
   `(slynk-mrepl:copy-to-repl-in-emacs
     (cl:list ,sexp) :blurb "" :pop-to-buffer nil)))

(sly-eval-copy-to-repl '(cl:+ 1 2 3))
#+end_src

* Testing
:PROPERTIES:
:NAVI_ID: post-test
:EXPORT_FILE_NAME: post-test.html
:EXPORT_DATE: 2023-08-05
:END:

Hello
